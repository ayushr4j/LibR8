Language




context
    processors -> cpu , gpu, math processor, neural engines.
        instruction sets
            base
                number, bool, char, arrays(Dynamic/Static)
                memory
                    

                data types
                
            math
            crypto
            image
            vectors
            physics

    InstructionSet


    char
        basic arithmetic operations on numeric representation of the character
        memory
        subtypes

            unicode

            ascii
    
    string
        memory -> stores chars

predefined types -> 
    byte, char, string, number, bool
    array, list, tree, map, set


syntax structure -> list

    

(type)[] -> (array){ }


syntax

(char[] c) -> (String str) { }
(char c[]) -> (Number num) { } 
(String str) -> (Number num) { }

syntax function

() -> required parameters
[] -> optional parameters
<optional part of function> how to handle repeat parts of like multiple p

named parts of function and how to handle multiple named parts like inheritance lists

name / operators

mix and match parameter list and names

-> end of syntax declarations

return types and variables

code optional for declarations and definition

<(name) ,> name ->   

recursive list
(list_item0) <, (list_item1)> -> (list)
(list) <, (list_item)> -> (list) 

example

ifStatment : if (condition) (code) <else (code)> -> (void) {}
doWhileStatement : do (code) while (condition) -> (void) {}
type_declaration : class (name) <: <[Access_Identifier] (names)>... > [code]



