cmake_minimum_required(VERSION 3.28)
project(ModTest CXX)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)



set(MODULE_OUTPUT_DIR "${workspaceFolder}/modules")
set(ARCHIVE_OUTPUT_DIRECTORY "${workspaceFolder}/lib")
set(LIBRARY_OUTPUT_DIRECTORY "${workspaceFolder}/lib")
set(RUNTIME_OUTPUT_DIRECTORY "${workspaceFolder}/bin")

#add_compile_definitions(_ALLOW_COMPILER_AND_STL_VERSION_MISMATCH)

include_directories(
    include/
    src/
)


add_library(base STATIC)
target_sources(
    base PUBLIC
    include/core/base/coroutine.cpp
)

add_library(memory STATIC)
target_sources(memory PUBLIC 
    src/core/memory/allocator.cpp
    src/core/memory/allocation.cpp
    src/core/memory/memory.cpp
)


add_library(type STATIC)
target_sources(type PUBLIC 
    src/core/type/reference.cpp
)




if(False)

add_library(log)


target_sources(log
  PUBLIC
  FILE_SET CXX_MODULES
        FILES log.cppm
)

# Compile base module interface to BMI
add_custom_command(
    OUTPUT ${CMAKE_BINARY_DIR}/base.pcm
    COMMAND clang++ ${CLANG_MODULE_FLAGS}  ${CMAKE_SOURCE_DIR}/base.cppm -o base.pcm
    DEPENDS ${CMAKE_SOURCE_DIR}/base.cppm
)

# Compile base.cppm -> base.o
add_custom_command(
    OUTPUT ${CMAKE_BINARY_DIR}/base.o
    COMMAND clang++ ${CLANG_MODULE_FLAGS} -c ${CMAKE_SOURCE_DIR}/base.cppm -o base.o
    DEPENDS ${CMAKE_SOURCE_DIR}/base.cppm ${CMAKE_BINARY_DIR}/base.pcm
)

add_custom_target(base_mod ALL DEPENDS ${CMAKE_BINARY_DIR}/base.o)

# Compile log.cppm -> log.o (depends on base.pcm)
add_custom_command(
    OUTPUT ${CMAKE_BINARY_DIR}/log.o
    COMMAND clang++ ${CLANG_MODULE_FLAGS} -c ${CMAKE_SOURCE_DIR}/log.cppm -o log.o
    DEPENDS ${CMAKE_SOURCE_DIR}/log.cppm ${CMAKE_BINARY_DIR}/base.pcm
)

add_custom_target(log_mod ALL DEPENDS ${CMAKE_BINARY_DIR}/log.o)

# Build main

endif()
